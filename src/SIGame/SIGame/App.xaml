<Application
    x:Class="SIGame.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"             
    xmlns:l="clr-namespace:SIGame"
    xmlns:lp="clr-namespace:SIGame.Properties"
    xmlns:local="clr-namespace:SIGame;assembly=SIGame.ViewModel"
    xmlns:vmm="clr-namespace:SIGame.ViewModel.Models;assembly=SIGame.ViewModel"
    xmlns:localc="clr-namespace:SIGame.Converters"
    xmlns:lb="clr-namespace:SIGame.Behaviors"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:uib="clr-namespace:SIUI.Behaviors;assembly=SIUI"
    xmlns:sc="clr-namespace:SICore;assembly=SICore"
    xmlns:sd="clr-namespace:SIData;assembly=SIData"
    DispatcherUnhandledException="Application_DispatcherUnhandledException"
    Startup="Application_Startup"
    Exit="Application_Exit"
    ShutdownMode="OnMainWindowClose">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Theme/Controls.xaml" />
                <ResourceDictionary Source="/Theme/ScrollBar.xaml" />
                <ResourceDictionary Source="/Theme/Expander.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#3D26A0DA" />
            <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="#FF26A0DA" />

            <SolidColorBrush x:Key="ErrorColor" Color="#FFFDB7BE" />

            <SolidColorBrush x:Key="Button.Highlight.Background" Color="{StaticResource Hover}" />

            <Style TargetType="{x:Type Border}" x:Key="SIBorder">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="{StaticResource MainColor}" />
            </Style>

            <DropShadowEffect x:Key="DeepEffect" ShadowDepth="10" />

            <Style TargetType="{x:Type TextBlock}" x:Key="CommonText" BasedOn="{StaticResource ShadowedText}">
                <Setter Property="Foreground" Value="{StaticResource MainColor}" />
            </Style>

            <Style x:Key="CenteredText" BasedOn="{StaticResource SIText}" TargetType="{x:Type TextBlock}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Center" />
            </Style>

            <Style x:Key="CheckBoxBase" TargetType="CheckBox">
                <Setter Property="Foreground" Value="{StaticResource MainColor}" />
                <Setter Property="Cursor" Value="Hand" />

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource HoverColor}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="SliderBase" TargetType="Slider">
                <Setter Property="Cursor" Value="Hand" />
            </Style>

            <Style TargetType="Slider" BasedOn="{StaticResource SliderBase}" />

            <Style x:Key="WhiteButton" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource SIButton}">
                <Setter Property="Foreground" Value="White" />
                <Setter Property="BorderBrush" Value="White" />

                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="Gray" />
                        <Setter Property="BorderBrush" Value="Gray" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <localc:EqualityConverter x:Key="Equals" />

            <localc:ImageConverter x:Key="ImageConverter">
                <localc:ImageConverter.FallbackImage>
                    <BitmapImage UriSource="pack://application:,,,/SIGame;component/Resources/avatar-m.png" />
                </localc:ImageConverter.FallbackImage>
            </localc:ImageConverter>

            <Style x:Key="DecoratedAvatar" TargetType="ContentControl">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Border x:Name="border" Margin="5">
                                <Image
                                    Source="{Binding Converter={StaticResource ImageConverter}}"
                                    Stretch="Uniform" />
                            </Border>

                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding}" Value="">
                                    <Setter TargetName="border" Property="Background" Value="#88FFFFFF"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <localc:ToStringConverter x:Key="ToStringConverter" />
            <localc:BooleanToHiddenConverter x:Key="BooleanToHiddenConverter" />
            <localc:NotNullToVisibilityConverter x:Key="NotNullToVisibilityConverter1" />
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter1" />
            <localc:BooleanToCollapsedConverter x:Key="BooleanToCollapsedConverter" />
            <localc:PlusOneConverter x:Key="PlusOneConverter" />

            <SolidColorBrush x:Key="WindowBorderColor" Color="White" />

            <LinearGradientBrush x:Key="Gradient" StartPoint="0,0" EndPoint="0.5,0" SpreadMethod="Reflect">
                <GradientStop Offset="0" Color="#00000000" />
                <GradientStop Offset="0.5" Color="#FF111111" />
            </LinearGradientBrush>

            <BitmapCache x:Key="windowCache" RenderAtScale="1" EnableClearType="True" SnapsToDevicePixels="True" />

            <ControlTemplate x:Key="DeleteButtonTemplate" TargetType="{x:Type Button}">
                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent">
                    <Path Data="M0,0L1,1M1,0L0,1" Stroke="Red" StrokeThickness="2" Stretch="Fill" Margin="2" />
                </Border>
            </ControlTemplate>

            <ControlTemplate x:Key="EditButtonTemplate" TargetType="{x:Type Button}">
                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent">
                    <Path Data="M10,0L0,10L0,13L3,13L13,3z" Fill="#FF333333" Stretch="Uniform" Margin="2" />
                </Border>
            </ControlTemplate>

            <Style x:Key="MainProgress" TargetType="ProgressBar">
                <Setter Property="Visibility" Value="Hidden" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsProgress}" Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource SIToolButtonStyle}">
                <Setter Property="Margin" Value="0,15,15,0" />
            </Style>

            <Style x:Key="PopupButtonStyle" TargetType="Button" BasedOn="{StaticResource SIToolButtonStyle}">
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="Width" Value="30" />
                <Setter Property="Height" Value="30" />
                <Setter Property="Padding" Value="0,1,1,0" />
                <Setter Property="FontSize" Value="40" />
                <Setter Property="Visibility" Value="Visible" />
                <Setter Property="Command" Value="{Binding Popup}" />
                <Setter Property="ToolTip" Value="{x:Static lp:Resources.PopupHint}" />

                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Path
                                Data="M0,19L20,0L8,0.2M20,-1.5L20,10"
                                Stroke="Orange"
                                StrokeThickness="3"
                                StrokeLineJoin="Bevel"
                                Stretch="Uniform"
                                Margin="4" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="Command" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Hidden" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="windowStyle" TargetType="{x:Type ContentControl}">
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0" ScaleY="0" />
                    </Setter.Value>
                </Setter>

                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Border
                                Name="Bd"
                                BorderBrush="{StaticResource WindowBorderColor}"
                                Background="{StaticResource WindowBackground}"
                                BorderThickness="3.75"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                TextBlock.Foreground="{StaticResource MainColor}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <ProgressBar
                                        Grid.ColumnSpan="3"
                                        Foreground="DarkBlue"
                                        IsIndeterminate="True"
                                        Height="4"
                                        VerticalAlignment="Top"
                                        DataContext="{Binding Data}"
                                        Style="{StaticResource MainProgress}" />

                                    <TextBlock
                                        Text="{TemplateBinding Tag}"
                                        Style="{StaticResource CommonText}"
                                        FontSize="30"
                                        FontWeight="SemiBold"
                                        Margin="20,24,10,4"
                                        VerticalAlignment="Center" />

                                    <Button Grid.Column="1" x:Name="bPopup" Style="{StaticResource PopupButtonStyle}" Margin="0,0,5,0" />

                                    <Button
                                        Grid.Column="2"
                                        x:Name="bClose"
                                        Style="{StaticResource CloseButton}"
                                        HorizontalContentAlignment="Stretch"
                                        VerticalContentAlignment="Stretch"
                                        Width="30"
                                        Height="30"
                                        Padding="0,1,1,0"
                                        Margin="0,0,20,0"
                                        Command="{Binding Cancel}"
                                        IsEnabled="{TemplateBinding IsEnabled}"
                                        ToolTip="{x:Static lp:Resources.Close}"
                                        IsCancel="True">
                                        <Path
                                            Data="M0,0L1,1M1,0L0,1"
                                            Stroke="{StaticResource MainColor}"
                                            StrokeThickness="2"
                                            Stretch="Uniform"
                                            Margin="2" />
                                    </Button>

                                    <ContentPresenter
                                        Grid.Row="1"
                                        Grid.ColumnSpan="3"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Control.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25" />
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.25" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>

                                <EventTrigger RoutedEvent="Button.Click" SourceName="bClose">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.25" />
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.25" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>

                                <DataTrigger
                                    Binding="{Binding RelativeSource={RelativeSource AncestorType=l:MainWindow, AncestorLevel=1,Mode=FindAncestor}}"
                                    Value="{x:Null}">
                                    <Setter TargetName="bPopup" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="bClose" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="2" Color="#FF555555" />
                    </Setter.Value>
                </Setter>
            </Style>

            <localc:ReverseTimeConverter x:Key="ReverseTimeConverter" />

            <Style x:Key="windowStyleWithProgress" TargetType="{x:Type ContentControl}">
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0" ScaleY="0" />
                    </Setter.Value>
                </Setter>

                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Border
                                Name="Bd"
                                BorderBrush="{StaticResource WindowBorderColor}"
                                Background="{StaticResource WindowBackground}"
                                BorderThickness="1"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                TextBlock.Foreground="{StaticResource MainColor}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <ProgressBar
                                        Grid.ColumnSpan="3"
                                        Foreground="{StaticResource ProgressBarColorBrush}"
                                        Height="8"
                                        VerticalAlignment="Top"
                                        Minimum="0"
                                        Maximum="100"
                                        Value="{Binding
                                            Mode=OneWay,
                                            Path=Timers[2].Time,
                                            Converter={StaticResource ReverseTimeConverter}}" />

                                    <Rectangle Grid.Row="1" Grid.ColumnSpan="3" Fill="#FF183CF3" />

                                    <TextBlock
                                        Grid.Row="1"
                                        Text="{TemplateBinding Tag}"
                                        Style="{StaticResource CommonText}"
                                        FontSize="30"
                                        FontWeight="Bold"
                                        Margin="10,4"
                                        VerticalAlignment="Center" />

                                    <Button
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        x:Name="bPopup"
                                        Style="{StaticResource PopupButtonStyle}"
                                        Margin="0,5,0,0" />

                                    <Button
                                        Grid.Row="1"
                                        Grid.Column="2"
                                        x:Name="bClose"
                                        Style="{StaticResource CloseButton}"
                                        HorizontalContentAlignment="Stretch"
                                        VerticalContentAlignment="Stretch"
                                        Width="30"
                                        Height="30"
                                        Padding="0,1,1,0"
                                        Margin="0,5,10,0"
                                        Command="{Binding Cancel}"
                                        IsEnabled="{TemplateBinding IsEnabled}"
                                        ToolTip="{x:Static lp:Resources.Close}"
                                        IsCancel="True">
                                        <Path
                                            Data="M0,0L1,1M1,0L0,1"
                                            Stroke="{StaticResource MainColor}"
                                            StrokeThickness="2"
                                            Stretch="Uniform"
                                            Margin="5" />
                                    </Button>

                                    <ContentPresenter Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Control.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25" />
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.25" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>

                                <EventTrigger RoutedEvent="Button.Click" SourceName="bClose">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.25" />
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.25" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>

                                <DataTrigger
                                        Binding="{Binding RelativeSource={RelativeSource AncestorType=l:Studia, AncestorLevel=1,Mode=FindAncestor}}"
                                        Value="{x:Null}">
                                    <Setter TargetName="bPopup" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="bClose" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="2" Color="#FF555555" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Storyboard x:Key="FadeOut">
                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.25" />
                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.25" />
            </Storyboard>

            <Style x:Key="navigatorStyle" TargetType="{x:Type ContentControl}">
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0" ScaleY="0" />
                    </Setter.Value>
                </Setter>

                <Setter Property="lb:FadeOutBehaviour.IsAttached" Value="True" />
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Border
                                Name="Bd"
                                BorderBrush="{StaticResource WindowBorderColor}"
                                Background="{StaticResource WindowBackground}"
                                BorderThickness="1"
                                VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                TextBlock.Foreground="{StaticResource MainColor}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <ProgressBar
                                        Grid.ColumnSpan="2"
                                        Foreground="DarkBlue"
                                        IsIndeterminate="True"
                                        Height="4"
                                        VerticalAlignment="Top"
                                        DataContext="{Binding Content.Data}"
                                        Style="{StaticResource MainProgress}" />

                                    <StackPanel Orientation="Horizontal">
                                        <Button
                                            Command="{Binding Back}"
                                            Visibility="{Binding
                                                IsEnabled,
                                                RelativeSource={RelativeSource Self},
                                                Converter={StaticResource BooleanToVisibilityConverter1}}"
                                            ToolTip="{x:Static lp:Resources.Back}"
                                            Style="{StaticResource SIButtonSimple}"
                                            Width="44"
                                            Height="44"
                                            BorderThickness="0"
                                            VerticalAlignment="Center"
                                            HorizontalContentAlignment="Stretch"
                                            VerticalContentAlignment="Stretch">
                                            <Path
                                                Data="M5,0L0,5L5,10M0.2,5L10,5"
                                                Stroke="{StaticResource MainColor}"
                                                StrokeThickness="2"
                                                Stretch="Uniform"
                                                Margin="12" />
                                        </Button>

                                        <TextBlock
                                            Text="{TemplateBinding Tag}"
                                            Style="{StaticResource CommonText}"
                                            FontSize="25"
                                            FontWeight="SemiBold"
                                            Margin="10,4"
                                            VerticalAlignment="Center" />
                                    </StackPanel>

                                    <Button
                                        x:Name="bClose"
                                        Grid.Column="1"
                                        Style="{StaticResource CloseButton}"
                                        HorizontalContentAlignment="Stretch"
                                        VerticalContentAlignment="Stretch"
                                        Width="30"
                                        Height="30"
                                        Padding="0,1,1,0"
                                        Margin="0,0,7,0"
                                        Command="{Binding CancelBase}"
                                        IsEnabled="{TemplateBinding IsEnabled}"
                                        ToolTip="{x:Static lp:Resources.Close}"
                                        IsCancel="True">
                                        <Path
                                            Data="M0,0L1,1M1,0L0,1"
                                            Stroke="{StaticResource MainColor}"
                                            StrokeThickness="2"
                                            Stretch="Uniform"
                                            Margin="5" />
                                    </Button>

                                    <ContentPresenter Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Control.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25" />
                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.25" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="2" Color="#FF555555" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="dialogStyle" TargetType="{x:Type ContentControl}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Border
                                Name="Bd"
                                BorderBrush="{StaticResource WindowBorderColor}"
                                Background="{StaticResource WindowBackground}"
                                BorderThickness="3.75"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                TextBlock.Foreground="{StaticResource MainColor}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <ProgressBar
                                        Grid.ColumnSpan="2"
                                        Foreground="DarkBlue"
                                        IsIndeterminate="True"
                                        Height="4"
                                        VerticalAlignment="Top"                                    
                                        DataContext="{Binding Data}"
                                        Style="{StaticResource MainProgress}" />

                                    <TextBlock
                                        Text="{TemplateBinding Tag}"
                                        Style="{StaticResource CommonText}"
                                        FontSize="30"
                                        FontWeight="Bold"
                                        Margin="10,4"
                                        VerticalAlignment="Center" />

                                    <Button
                                        x:Name="bClose"
                                        Grid.Column="1"
                                        Style="{StaticResource CloseButton}"
                                        HorizontalContentAlignment="Stretch"
                                        VerticalContentAlignment="Stretch"
                                        Width="30"
                                        Height="30"
                                        Padding="0,1,1,0"
                                        Command="{Binding Cancel}"
                                        IsEnabled="{TemplateBinding IsEnabled}"
                                        ToolTip="{x:Static lp:Resources.Close}"
                                        IsCancel="True">
                                        <Path
                                            Data="M0,0L1,1M1,0L0,1"
                                            Stroke="{StaticResource MainColor}"
                                            StrokeThickness="2"
                                            Stretch="Uniform"
                                            Margin="5" />
                                    </Button>

                                    <ContentPresenter Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="2" Color="#FF555555" />
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="Content" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <localc:IsNullToBooleanConverter x:Key="NullToBooleanConverter1" />

            <!--Border colors-->
            <Color x:Key="BorderMediumColor">#FF888888</Color>

            <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>

            <Color x:Key="DisabledForegroundColor">#FF888888</Color>

            <Style x:Key="GameButtonSetter" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SIButton}">
                <Setter
                Property="Content"
                Value="{Binding Source={x:Static local:UserSettings.Default}, Path=GameSettings.GameButtonKey, Converter={StaticResource ToStringConverter}}" />
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Content" Value="{x:Static lp:Resources.PressTheButton}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle
                                StrokeDashArray="1 2"
                                StrokeThickness="1"
                                Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                SnapsToDevicePixels="true"
                                Margin="2" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
                <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>

            <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFECF4FC" Offset="0.0"/>
                <GradientStop Color="#FFDCECFC" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>

            <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
                <GradientStop Color="#FFDCECFC" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>

            <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFDAECFC" Offset="0.0"/>
                <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>

            <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
                <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>

            <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="Cursor" Value="Hand" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
                                <Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                                    <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Stroke="{TemplateBinding Foreground}" Data="F1 M 0,0 L4,4 L8,0"/>
                                </Border>
                            </Border>

                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Button.Highlight.Background}"/>
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                                </MultiDataTrigger>

                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                                </Trigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                                </MultiDataTrigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Visibility" TargetName="arrow" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>

                    <Popup
                        x:Name="PART_Popup"
                        AllowsTransparency="true"
                        Grid.ColumnSpan="2"
                        IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Margin="1"
                        PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                        Placement="Bottom">
                        <Border
                            x:Name="dropDownBorder"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            BorderThickness="1"
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle
                                            x:Name="opaqueRect"
                                            Fill="{Binding Background, ElementName=dropDownBorder}"
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    
                                    <ItemsPresenter
                                        x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>

                    <ToggleButton
                        x:Name="toggleButton"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Grid.ColumnSpan="2"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource ComboBoxToggleButton}" />

                    <ContentPresenter
                        x:Name="contentPresenter"
                        TextBlock.Foreground="{TemplateBinding Foreground}"
                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                        Content="{TemplateBinding SelectionBoxItem}"
                        ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        IsHitTestVisible="false"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>

                <ControlTemplate.Triggers>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
                    </Trigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true" />
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                        </MultiTrigger.Conditions>

                        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                    </MultiTrigger>

                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
                <Setter Property="Foreground" Value="Black" />
            </Style>

            <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="{StaticResource MainColor}" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="Padding" Value="6,3,5,3"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
            </Style>

            <Style x:Key="ComboBoxMainStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}">
                <Setter Property="Foreground" Value="{StaticResource MainColor}" />
            </Style>

            <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#F0F0F0" Offset="0.0"/>
                <GradientStop Color="#E5E5E5" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>

            <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#ECF4FC" Offset="0.0"/>
                <GradientStop Color="#DCECFC" Offset="1.0"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
            <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
            <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
            <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
            <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>

            <Style x:Key="TabItemStyle1" TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Foreground" Value="{StaticResource MainColor}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
                <Setter Property="Margin" Value="0,-5,0,0"/>
                <Setter Property="Padding" Value="6,2,6,4"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Cursor" Value="Hand" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    ContentSource="Header"
                                    Focusable="False"
                                    Margin="{TemplateBinding Padding}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                    VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="Foreground" Value="#66FFFFFF"/>
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=templateRoot}" Value="true"/>
                                        <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                                    </MultiDataTrigger.Conditions>

                                    <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="#99FFFFFF"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Border
                                Margin="7,0,0,0"
                                BorderBrush="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource Self}}"
                                BorderThickness="0,0,0,3">
                                <TextBlock Text="{Binding}" FontWeight="SemiBold" Effect="{StaticResource Effect}" />
                            </Border>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="StudiaTab" TargetType="TabItem" BasedOn="{StaticResource TabItemStyle1}">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="0" />

                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Border x:Name="border" Width="43" HorizontalAlignment="Center" Padding="7">
                                <TextBlock
                                    x:Name="text"
                                    Text="{Binding}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center" />
                            </Border>

                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsSelected}" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="White" />
                                    <Setter TargetName="text" Property="Foreground" Value="Black" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <LinearGradientBrush x:Key="PersonGradient" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="#232323" Offset="0" />
                <GradientStop Color="#010312" Offset="1" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="GradientRev" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="#232323" Offset="1" />
                <GradientStop Color="#010312" Offset="0" />
            </LinearGradientBrush>

            <Style x:Key="PersonTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="Margin" Value="3,1" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="uib:FillManager.Fill" Value="True" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="TextAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.IsConnected}" Value="False">
                        <Setter Property="Foreground" Value="Gray" />
                    </DataTrigger>
                    
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource Equals}">
                                <Binding Path="Model.Name" />
                                <Binding RelativeSource="{RelativeSource AncestorType=l:Studia}" Path="DataContext.Data.Name" />
                            </MultiBinding>
                        </DataTrigger.Binding>
                        
                        <Setter Property="Foreground" Value="Orange" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="sumTB" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource PersonTextStyle}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.Sum}" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="nonShowman" TargetType="Border">
                <Setter Property="Background" Value="{StaticResource PersonGradient}" />
                
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.Sum}" Value="{x:Null}">
                        <Setter Property="Background" Value="{x:Null}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="nonShowmanRev" TargetType="Border">
                <Setter Property="Background" Value="{StaticResource GradientRev}" />
                
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.IsShowman}" Value="True">
                        <Setter Property="Height" Value="0" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="stakeBorder" TargetType="Border" BasedOn="{StaticResource nonShowman}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.Stake}" Value="0">
                        <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Model.Stake}" Value="-2">
                        <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Model.Stake}" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="stakeTB" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource PersonTextStyle}">
                <Setter Property="Foreground" Value="#ffa000" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.SafeStake}" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource MainColor}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <localc:SexConverter x:Key="SexConverter" />
            <localc:IsBeforeGameConverter x:Key="ReadyConverter" />
            <localc:AuctionStakesConverter x:Key="AuctionStakes" />
            <localc:RowHeightConverter x:Key="RowHeightConverter" />
            <localc:GreaterThanConverter x:Key="GreaterThan" />
            <localc:Multiplier x:Key="Multiplier" />
            <localc:ChangeTypeConverter x:Key="ChangeTypeConverter" />

            <Style x:Key="ReadyStyle" TargetType="Border">
                <Setter Property="Background" Value="{StaticResource PersonGradient}" />
                <Setter Property="Opacity" Value="0" />
                
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Ready}" Value="True">
                        <Setter Property="Opacity" Value="1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ReadyButton" TargetType="{x:Type Button}" BasedOn="{StaticResource SIButton}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Setter Property="FontWeight" Value="SemiBold" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Data.Stage}" Value="{x:Static sd:GameStage.Before}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    
                    <DataTrigger Binding="{Binding Ready}" Value="True">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="area" TargetType="{x:Type Grid}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding InGame}" Value="False">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ReplicText" TargetType="{x:Type TextBlock}">
                <Setter Property="TextWrapping" Value="Wrap" />
                <Setter Property="TextAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="6" />
            </Style>

            <Style x:Key="ReplicBorder" TargetType="Border">
                <Setter Property="Opacity" Value="0.0" />
                <Setter Property="IsHitTestVisible" Value="False" />
                <Setter Property="Background" Value="Lavender" />
            </Style>

            <Style x:Key="PlayerReplicBorder" TargetType="Border" BasedOn="{StaticResource ReplicBorder}">
                <Setter
                    Property="Width"
                    Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=0.96}" />
                
                <Setter
                    Property="Height"
                    Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=0.5}" />
                
                <Setter
                    Property="Canvas.Left"
                    Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=-0.254}" />
                
                <Setter
                    Property="Canvas.Top"
                    Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=-0.08}" />
                
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.Replic.Length, Mode=OneWay, Converter={StaticResource GreaterThan}, ConverterParameter=0}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="00:00:00.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="00:00:00.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ShowmanReplicBorder" TargetType="Border" BasedOn="{StaticResource ReplicBorder}">
                <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=0.96}" />
                <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=0.75}" />
                <Setter Property="Canvas.Top" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=-0.76}" />
                <Setter Property="Canvas.Left" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Grid}, Converter={StaticResource Multiplier}, ConverterParameter=0.03}" />
                <Setter Property="Canvas.Bottom" Value="{x:Static sys:Double.NaN}" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Model.Replic.Length, Mode=OneWay, Converter={StaticResource GreaterThan}, ConverterParameter=0}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="00:00:00.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>

                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="00:00:00.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <localc:StakeHeaderConverter x:Key="StakeHeaderConverter" />

            <localc:ViewConverter x:Key="DialogSelector">
                <localc:ViewConverter.DefaultView>
                    <DataTemplate />
                </localc:ViewConverter.DefaultView>

                <localc:ViewConverter.Views>
                    <DataTemplate x:Key="{x:Static vmm:DialogModes.AnswerValidation}">
                        <ContentControl Style="{StaticResource windowStyleWithProgress}" Tag="{x:Static lp:Resources.AnswerCheck}">
                            <l:AnswerValidationView />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.ChangeSum}">
                        <ContentControl Style="{StaticResource windowStyle}" Tag="{x:Static lp:Resources.SumChange}">
                            <l:ChangeSumView />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.Answer}">
                        <ContentControl Style="{StaticResource windowStyleWithProgress}" Tag="{x:Static lp:Resources.YourAnswer}">
                            <l:AnswerView />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.CatCost}">
                        <ContentControl Style="{StaticResource windowStyleWithProgress}" Tag="{x:Static lp:Resources.CatCost}">
                            <l:SimpleStakeView DataContext="{Binding Data}" />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.Stake}">
                        <ContentControl
                            Style="{StaticResource windowStyleWithProgress}"
                            Tag="{Binding Data.StakeInfo.PlayerName, Converter={StaticResource StakeHeaderConverter}}">
                            <l:StakeView />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.StakeNew}">
                        <ContentControl
                            Style="{StaticResource windowStyleWithProgress}"
                            Tag="{Binding Data.StakeInfo.PlayerName, Converter={StaticResource StakeHeaderConverter}}">
                            <l:StakeNewView />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.FinalStake}">
                        <ContentControl Style="{StaticResource windowStyleWithProgress}" Tag="{x:Static lp:Resources.Stake}">
                            <l:SimpleStakeView DataContext="{Binding Data}" />
                        </ContentControl>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static vmm:DialogModes.Report}">
                        <ContentControl Style="{StaticResource windowStyleWithProgress}" Tag="{x:Static lp:Resources.ReportTitle}">
                            <l:GameReportView DataContext="{Binding Report}" />
                        </ContentControl>
                    </DataTemplate>
                </localc:ViewConverter.Views>
            </localc:ViewConverter>
        </ResourceDictionary>
    </Application.Resources>
    
    <!--Application tasks-->
    <JumpList.JumpList>
        <JumpList>
            <JumpTask Title="{x:Static lp:Resources.JumpList_Logs}" Description="{x:Static lp:Resources.JumpList_Logs_Hint}" Arguments="/logs" />
            
            <JumpTask
                Title="{x:Static lp:Resources.JumpList_Feedback}"
                Description="{x:Static lp:Resources.JumpList_Feedback_Hint}"
                Arguments="/feedback" />
            
            <JumpTask Title="{x:Static lp:Resources.JumpList_Help}" Description="{x:Static lp:Resources.JumpList_Help_Hint}" Arguments="/help" />
        </JumpList>
    </JumpList.JumpList>
</Application>
